{"ast":null,"code":"var _jsxFileName = \"/Users/matildarosenlew/Exercice-TicTacToe/react-tic-tac-toe/src/Components/board.js\";\nimport React from 'react';\nimport { calcWinner } from '../Functions/calcWinner';\nimport { checkFullBoard } from '../Functions/checkFullBoard';\nimport { compMove } from '../Functions/compMove';\nimport { Box } from './box';\nimport { GameOver } from './gameOver';\nimport { BrowserRouter, Route, Link, Redirect } from 'react-router-dom';\nexport function Board(props) {\n  const [boxes, setBoxes] = React.useState(Array(9).fill(null));\n  const [xIsNext, setNext] = React.useState(true);\n  var xPlayer = props.location.state.playerIcon;\n  var boardColor = props.location.state.boardColor;\n\n  const renderBox = i => {\n    return /*#__PURE__*/React.createElement(Box, {\n      value: boxes[i],\n      onClick: () => handleClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 14\n      }\n    });\n  };\n\n  const handleClick = i => {\n    const boxes = boxes.slice();\n\n    if (calcWinner(boxes) || boxes[i]) {\n      return;\n    }\n\n    boxes[i] = xIsNext ? xPlayer : 'ðŸ§Ÿ';\n    setBoxes(boxes);\n    setNext(!xIsNext);\n  };\n\n  const handleComputerMove = () => {\n    let boxNmbr = compMove(boxes);\n    handleClick(boxNmbr);\n  };\n\n  const winner = calcWinner(boxes);\n  let status;\n\n  if (winner) {\n    status = 'Winner: ' + winner;\n    return winnerAnnounced('And the winner is ' + winner + '!');\n  } else if (checkFullBoard(boxes)) {\n    return winnerAnnounced('It was a tie!');\n  } else {\n    status = 'Next player: ' + (xIsNext ? xPlayer : 'ðŸ§Ÿ');\n\n    if (!xIsNext) {\n      handleComputerMove();\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"body clearfix\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"game-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, \"TIC-TAC-TOE\"), /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"board-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, status), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, renderBox(0), renderBox(1), renderBox(2)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, renderBox(3), renderBox(4), renderBox(5)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, renderBox(6), renderBox(7), renderBox(8)))));\n}\n\nfunction winnerAnnounced(msg) {\n  //console.log(winner);\n  return /*#__PURE__*/React.createElement(Redirect, {\n    to: {\n      pathname: \"/gameOver\",\n      state: {\n        win: msg\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  });\n}","map":{"version":3,"sources":["/Users/matildarosenlew/Exercice-TicTacToe/react-tic-tac-toe/src/Components/board.js"],"names":["React","calcWinner","checkFullBoard","compMove","Box","GameOver","BrowserRouter","Route","Link","Redirect","Board","props","boxes","setBoxes","useState","Array","fill","xIsNext","setNext","xPlayer","location","state","playerIcon","boardColor","renderBox","i","handleClick","slice","handleComputerMove","boxNmbr","winner","status","winnerAnnounced","msg","pathname","win"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {calcWinner} from '../Functions/calcWinner';\nimport {checkFullBoard} from '../Functions/checkFullBoard';\nimport {compMove} from '../Functions/compMove';\nimport {Box} from './box'; \nimport {GameOver} from './gameOver';\nimport { BrowserRouter, Route, Link, Redirect } from 'react-router-dom';\n\nexport function Board(props) {   \n  const [boxes, setBoxes] = React.useState(Array(9).fill(null));\n  const [xIsNext, setNext] = React.useState(true);\n  var xPlayer = props.location.state.playerIcon;\n  var boardColor = props.location.state.boardColor;\n\n    const renderBox= (i) => {\n      return <Box \n        value={boxes[i]}\n        onClick={() => handleClick(i)}\n        />;\n    }\n\n    const handleClick = (i) => {\n        const boxes = boxes.slice();\n        if (calcWinner(boxes) || boxes[i]) { \n          return;\n          }\n        boxes[i] = xIsNext ? xPlayer : 'ðŸ§Ÿ';\n        setBoxes(boxes);\n        setNext(!xIsNext);\n      }\n\n    const handleComputerMove = () => {\n        let boxNmbr = compMove(boxes);\n        handleClick(boxNmbr);\n    }\n\n\n        const winner = calcWinner(boxes);\n        let status;\n        if (winner) {\n          status = 'Winner: ' + winner;\n          return winnerAnnounced('And the winner is ' + winner + '!');\n        } else if (checkFullBoard(boxes)) {\n           return winnerAnnounced('It was a tie!');\n        } else {\n          status = 'Next player: ' + (xIsNext ? xPlayer : 'ðŸ§Ÿ');\n          if (!xIsNext){\n              \n              handleComputerMove();\n          }\n        }\n  \n      return (\n        <div className= \"body clearfix\">  \n        <div className= \"board-wrapper\">\n          <div className=\"board\">\n          <h1 className=\"game-header\">TIC-TAC-TOE</h1>        \n          <h2 className=\"board-heading\">{status}</h2>\n          <div className=\"board-row\">\n            {renderBox(0)}\n            {renderBox(1)}\n            {renderBox(2)}\n          </div>\n          <div className=\"board-row\">\n            {renderBox(3)}\n            {renderBox(4)}\n            {renderBox(5)}\n          </div>\n          <div className=\"board-row\">\n            {renderBox(6)}\n            {renderBox(7)}\n            {renderBox(8)}\n          </div>\n          </div>  \n        </div>\n        </div>\n      );\n    }\n\n  function winnerAnnounced(msg){\n      //console.log(winner);\n    return  <Redirect to={{pathname: \"/gameOver\" , state: {win:msg} }} />\n  }"]},"metadata":{},"sourceType":"module"}